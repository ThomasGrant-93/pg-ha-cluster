x-postgres-common:
  &postgres-common
  image: picasso/pg15-patroni:develop
  build:
    context: .
    dockerfile: docker/node.Dockerfile
  env_file:
    - .env
  ports:
    - "22"
    - "5432"
    - "8008"
  volumes:
    - ./barman/barman.conf:/etc/barman.conf
    - ./barman/barman.d/:/etc/barman.d/
    - ./patroni/patroni.yml:/etc/patroni/patroni.yml
    - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
    - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
  environment:
    &postgres-envs
    PATRONI_ETCD3_HOSTS: ${PATRONI_ETCD3_HOSTS}
    PATRONI_SCOPE: pg15cluster
    PATRONI_NAMESPACE: /${PATRONI_SCOPE:-pg15cluster}
  entrypoint: [ "/usr/local/bin/entrypoint.sh" ]
  logging:
    options:
      max-size: "1m"
      max-file: "5"
  depends_on:
    - etcd
    - barman
  healthcheck:
    test: [ "CMD", "pg_isready", "-d", "postgres", "-U", "postgres" ]
    interval: 5s
    timeout: 5s
    retries: 5
  restart: unless-stopped

x-etcd-common:
  &etcd-common
  image: bitnami/etcd:3.5.16
  restart: unless-stopped
  env_file:
    - .env
  logging:
    options:
      max-size: "1m"
      max-file: "5"
  environment:
    &etcd-envs
    ALLOW_NONE_AUTHENTICATION: yes
    ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
    ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
    ETCD_INITIAL_CLUSTER: ${ETCD_INITIAL_CLUSTER}
    ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster
    ETCD_INITIAL_CLUSTER_STATE: new
  ports:
    - "2379"
    - "2380"

services:
  etcd:
    <<: *etcd-common
    hostname: etcd
    container_name: etcd
    environment:
      <<: *etcd-envs
      ETCD_NAME: etcd
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd:2380
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
    volumes:
      - etcd-data:/bitnami/etcd

  haproxy:
    image: haproxy:3.1-alpine3.20
    hostname: haproxy
    container_name: haproxy
    env_file:
      - .env
    ports:
      - "6432:6432"
      - "6433:6433"
      - "8008:8008"
      - "8404:8404"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    healthcheck:
      test: [ "CMD", "pidof", "haproxy" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: on-failure

  pgsql15node01:
    <<: *postgres-common
    hostname: pgsql15node01
    container_name: postgresql-01
    environment:
      <<: *postgres-envs
      PATRONI_NAME: pgsql15node01
      PATRONI_RESTAPI_LISTEN: postgresql-01:8001
      PATRONI_RESTAPI_CONNECT_ADDRESS: postgresql-01:8001
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: pgsql15node01:5432

  pgsql15node02:
    <<: *postgres-common
    container_name: postgresql-02
    hostname: pgsql15node02
    environment:
      <<: *postgres-envs
      PATRONI_NAME: pgsql15node02
      PATRONI_RESTAPI_LISTEN: postgresql-02:8002
      PATRONI_RESTAPI_CONNECT_ADDRESS: postgresql-02:8002
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: pgsql15node02:5432

  pgsql15node03:
    <<: *postgres-common
    container_name: postgresql-03
    hostname: pgsql15node03
    environment:
      <<: *postgres-envs
      PATRONI_NAME: pgsql15node03
      PATRONI_RESTAPI_LISTEN: postgresql-03:8003
      PATRONI_RESTAPI_CONNECT_ADDRESS: postgresql-03:8003
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: pgsql15node03:5432

  barman:
    image: picasso/barman:develop
    build:
      context: .
      dockerfile: docker/barman.Dockerfile
    container_name: barman
    hostname: barman
    ports:
      - "22"
      - "9780:9780"
    healthcheck:
      test: [ "CMD", "curl", "--silent", "--fail", "http://localhost:9780/" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

volumes:
  minio-storage:
    driver: local
  etcd-data:
    driver: local
